;;; javamonkey-templates.el --- Java code editing templates for Emacs

;; Copyright (C) 1999 Peter Seibel

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2 of the
;; License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
;; USA


(require 'tempo)
(require 'cc-mode)
(require 'cc-langs)
(require 'javamonkey)

(global-set-key [?\M-n] 'tempo-forward-mark)
(global-set-key [?\M-p] 'tempo-backward-mark)

;; Stolen from cperl-mode.el by Ilya Zakharevich and Bob Olson

(defconst javamonkey-xemacs-p (string-match "XEmacs\\|Lucid" emacs-version))

(defvar javamonkey-del-back-ch
  (car (append (where-is-internal 'delete-backward-char)
               (where-is-internal 'backward-delete-char-untabify)))
  "Character generated by key bound to delete-backward-char.")

(if (and (vectorp javamonkey-del-back-ch)
         (= (length javamonkey-del-back-ch) 1))
    (setq javamonkey-del-back-ch (aref javamonkey-del-back-ch 0)))

(defun javamonkey-putback-char (c)	; Emacs 19
  (set 'unread-command-events (list c))) ; Avoid undefined warning

(if (boundp 'unread-command-events)
    (if javamonkey-xemacs-p
        (defun javamonkey-putback-char (c)	; XEmacs >= 19.12
          (setq unread-command-events (list (eval '(character-to-event c))))))
  (defun javamonkey-putback-char (c)		; XEmacs <= 19.11
    (set 'unread-command-event (eval '(character-to-event c))))) ; Avoid warnings

;; End of cperl theft.

(defun javamonkey-initialize-javamonkey-templates ()
  (javamonkey-start-java-file))

(defun javamonkey-backup ()
  "A function that pushes a delete-backwards on the event list and
returns nil so it can be included in tempo templates that are going
to be used in abbrevs."
  (javamonkey-putback-char javamonkey-del-back-ch)
  nil)

(defun javamonkey-define-abbrev-template (name list)
  (let ((function-name (intern (concat "javamonkey-template-" name)))
        (tempo-name
         (intern (symbol-name
                  (tempo-define-template
                   name
                   (append list '((javamonkey-backup))))))))

    ;; Then define our own flavor based on it.
    (fset function-name
          `(lambda (&optional arg)
             (if (not (javamonkey-in-comment-or-string)) (,tempo-name))))))


;; Javadoc skeleton.
(javamonkey-define-abbrev-template
 "javadoc" '("/**" '> 'n "* " '> 'p 'n "*/" '>))

;; Catch clause template
(javamonkey-define-abbrev-template
 "java-catch"
 '(" (" (javamonkey-get-exception-type) " " (javamonkey-get-exception-abbrev) ") {" '> 'n
   '> 'p 'n
   "}" '> 'n))


;; Generic template for loops ('while', 'for', as well as 'if', and
;; 'synchronized')
(javamonkey-define-abbrev-template
 "java-loop" '(" (" 'p ") {" '> 'n '> 'p 'n "}" '>))

;; Simple block.
(javamonkey-define-abbrev-template
 "java-block" '(" {" '> 'n '> 'p 'n "}" '>))

(defun javamonkey-insert-loop-block ()
  (interactive)
  (if (not (javamonkey-in-comment-or-string))
      (let ((at-eol (looking-at "\\s *$")))
        (if at-eol
            (javamonkey-template-java-loop)
          (progn
            (insert " (")
            (save-excursion
              (insert ")")
              (insert " {\n")
              (indent-for-tab-command)
              (end-of-line)
              (insert "\n")
              (indent-for-tab-command)
              (insert "}")
              (indent-for-tab-command))))
        (javamonkey-backup))
    (insert "")))


(defun javamonkey-insert-block ()
  (interactive)
  (if (not (javamonkey-in-comment-or-string))
      (let ((at-eol (looking-at "\\s *$")))
        (if at-eol
            (javamonkey-template-java-block)
          (progn
            (insert " {\n")
            (indent-for-tab-command)
            (end-of-line)
            (insert "\n")
            (indent-for-tab-command)
            (insert "}")
            (indent-for-tab-command))))))

;; Simple block, not for use in abbrevs.
(tempo-define-template
 "java-no-abbrev-block" '("{" 'p "}" '>))


(define-key java-mode-map "{"
            #'(lambda ()
                (interactive)
                (if (javamonkey-in-comment-or-string)
                    (insert "{")
                  (tempo-template-java-no-abbrev-block))))

;'tempo-template-java-no-abbrev-block)

(defvar javamonkey-exception-types)

;; This needs to be filled in with an automatically generated list of
;; standard exceptions.
(setq javamonkey-exception-types
      '(("ArrayIndexOutOfBoundsException" 1)
        ("IOException" 1)
        ("Exception" 1)))

(defun javamonkey-get-exception-type ()
  "Read the name of an exception type, completing from
javamonkey-exception-types. Used in the java-catch template."
  (let ((type (completing-read
               "Exception type: "
               javamonkey-exception-types nil nil "")))
    (if (javamonkey-needs-import-p type)
        (javamonkey-import-given-type type))
    type))

(defun javamonkey-get-exception-abbrev ()
  "Generate a variable name by making an acronym out of the exception
name that should follow the first '(' before the point. Used in the
java-catch template."
  (let ((abbrev ""))
    (save-excursion
      (search-backward "(")
      (forward-char 1)
      (let ((c (char-after (point))))
        (while (not (char-equal c ?\ ))
          (if (not (char-is-lower-case c))
              (setq abbrev (concat abbrev (downcase (char-to-string c)))))
          (forward-char 1)
          (setq c (char-after (point))))))
    abbrev))

(defun javamonkey-insert-synchronized ()
  (interactive)
  (if (not (assoc 'topmost-intro (c-guess-basic-syntax)))
      (javamonkey-insert-loop-block)))

(defun javamonkey-insert-if-block ()
  (interactive)
  (let ((p (point)))
    (if (save-excursion
          (and
           (search-backward-regexp "else\\s *\{[ \t\n]*if\\s *" (point-min) t)
           (= (+ (point) (length (match-string 0))) p)))
        (progn
          (replace-match "else if")
          ;; take of the extra closing brace.
          (save-excursion
            (beginning-of-line 2)
            (kill-line)))))
  (javamonkey-insert-loop-block))

(defun char-is-lower-case (char)
  (not (= char (upcase char))))


(defun javamonkey-add-java-mode-abbrev (name expansion hook)
  (define-abbrev java-mode-abbrev-table name expansion hook 0))

(defun javamonkey-add-java-mode-abbrevs (list)
  (mapc (lambda (l) (apply #'javamonkey-add-java-mode-abbrev l)) list))

;; Add some control construct abbrevs.
(javamonkey-add-java-mode-abbrevs
 '(("try" "try"                   javamonkey-insert-block)
   ("else" "else"                 javamonkey-insert-block)
   ("finally" "finally"           javamonkey-insert-block)

   ("for" "for"                   javamonkey-insert-loop-block)
   ("switch" "switch"             javamonkey-insert-loop-block)
   ("synchronized" "synchronized" javamonkey-insert-synchronized)
   ("while" "while"               javamonkey-insert-loop-block)

   ("catch" "catch"               javamonkey-template-java-catch)
   ("doc" ""                      javamonkey-template-javadoc)
   ("if" "if"                     javamonkey-insert-if-block)
   ("testcase" ""                 javamonkey-template-testmethod)))

;; Test method template
(javamonkey-define-abbrev-template
 "testmethod"
 '("/**" '> 'n
   "*" '> 'p 'n
   "*/" '> 'n
   "public boolean test" (P "Name: ") "() {" '> 'n>
   'n
   "}" '> 'n))

(defun javamonkey-start-java-file ()
  (interactive)
  (if (= (buffer-size) 0)
      (let ((class-name (javamonkey-current-classname)))
        (cond
         ((string-match "Exception$" class-name)
          (tempo-template-java-exception-class))
         (t (tempo-template-java-class))))))

(defun javamonkey-auto-class-javadoc ()
  (let ((name (javamonkey-current-classname)))
    (if (and (> (length name) 4)
             (string-equal "Test" (substring name -4 nil)))
        (concat "Unit test for " (javamonkey-find-package) "."
                (substring name 0 -4) ".")
      (concat "I, " (upcase (user-login-name)) ", am too lazy to write a single sentence about what this class is for."))))

(tempo-define-template
 "java-class"
 '("package " (javamonkey-find-package) ";" n
   n
   javamonkey-java-copyright
   n
   n
   "/**" > n
   "* " (javamonkey-auto-class-javadoc) > n
   "*/" > n
   "public class " (javamonkey-current-classname) " {" n
   n
   > p n
   n
   "}"))

(tempo-define-template
 "java-exception-class"
 '("package " (javamonkey-find-package) ";" n
   n
   "import com.kenamea.util.NestedException;" > n
   n
   javamonkey-java-copyright
   n
   n
   "/**" > n
   "* " (javamonkey-auto-class-javadoc) > n
   "*/" > n
   "public class " (javamonkey-current-classname) " extends NestedException {" n
   n
   (javamonkey-current-classname) "() {}" > n
   (javamonkey-current-classname) "(String message) { super(message); }" > n
   (javamonkey-current-classname) "(Throwable nested) { super(nested); }" > n
   (javamonkey-current-classname) "(String message, Throwable nested) {" > n
   "super(message, nested);" > n
   "}" > n
   n
   "}"))


(tempo-define-template
 "java-get-set"
 '(> "private " (P "Type: " type) " " (P "Name: " name) ";" >
     n
   n "public " (s type) " get"
   (javamonkey-upcase-first (tempo-lookup-named 'name)) "() { " >
   n "return " (s name) "; " >
   n "}" >
   n
   n "public void set" (javamonkey-upcase-first (tempo-lookup-named 'name))
   "(" (s type) " " (s name) ") {" >
   n "this." (s name) " = " (s name) ";" >
   n "}" > n n))

(defun javamonkey-insert-bean-property ()
  (interactive)
  (tempo-template-java-get-set))

(defvar javamonkey-gpl-java
  (format-time-string
"/*
 * Copyright (c) %Y Peter Seibel
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */"))

(defvar javamonkey-mit-java
  (format-time-string
"/*
 * Copyright (c) %Y Peter Seibel
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */"))

(defvar javamonkey-gpl-lisp
  (format-time-string
";;
;; Copyright (c) %Y Peter Seibel
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
;; USA
;;"))


(defvar javamonkey-java-copyright javamonkey-mit-java)

(defvar javamonkey-lisp-copyright javamonkey-gpl-lisp)

(tempo-define-template
 "java-copyright"
 '(> javamonkey-java-copyright n))

(tempo-define-template
 "lisp-copyright"
 '(> javamonkey-lisp-copyright n))

(defun javamonkey-insert-java-copyright ()
  (interactive)
  (tempo-template-java-copyright))

(defun javamonkey-insert-lisp-copyright ()
  (interactive)
  (tempo-template-lisp-copyright))


(defun javamonkey-upcase-first (s)
  (if (not (zerop (length s)))
      (concat (upcase (substring s 0 1)) (substring s 1))
  s))

(add-hook 'java-mode-hook #'javamonkey-initialize-javamonkey-templates)

(provide 'javamonkey-templates)
